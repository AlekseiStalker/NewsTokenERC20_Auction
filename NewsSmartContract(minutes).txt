pragma solidity ^0.4.20;
 
library SafeMath {
 
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
 
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
 
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
 
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract ERC20 {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
  
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool); 
  event Approval(address indexed owner, address indexed spender, uint256 value); 
} 

contract StandardToken is ERC20 {
  using SafeMath for uint256;

  uint256 totalSupply_;

  mapping(address => uint256) balances;
  mapping (address => mapping (address => uint256)) internal allowed;
 
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }
 
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
 
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }
 
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }
 
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }
 
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }
 
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  } 

  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  } 

  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  } 
}

contract NewsToken is StandardToken {

  string public constant name = "NewsToken";  
  string public constant symbol = "NEWS"; 
  uint8 public constant decimals = 12;  

  uint256 public constant INITIAL_SUPPLY = 175000000 * (10 ** uint256(decimals));

  address bountyWallet = 0x0; 
 
  function NewsToken(address saleAgent) public {
    totalSupply_ = INITIAL_SUPPLY;

    balances[bountyWallet] = 15000000 * (10 ** uint256(decimals));
    Transfer(0x0, bountyWallet, 15000000 * (10 ** uint256(decimals)));
    
    balances[saleAgent] = INITIAL_SUPPLY - balances[bountyWallet];
    Transfer(0x0, saleAgent, INITIAL_SUPPLY - balances[bountyWallet]); 
  }  

  function transferBountyTokens(address[] _recivers, uint[] _amountTokens) public returns(bool) {
      require(bountyWallet == msg.sender);
      require(_recivers.length == _amountTokens.length);
      require(_recivers.length <= 40);
        
    for(uint i = 0; i < _recivers.length; i++) { 
        balances[bountyWallet] = balances[bountyWallet].sub(_amountTokens[i]);
        balances[_recivers[i]] = balances[_recivers[i]].add(_amountTokens[i]);

        Transfer(bountyWallet, _recivers[i], _amountTokens[i]); 
    }
  }
} 

contract IToken {
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
}

contract NewsCrowdsale {
    
    address public token;
 
    uint public timeDeploy; 

    address public ownerWallet;

    uint timeStartAuction; 
    uint timeFinalizeAuction;  

    uint numOf_SalesDays;
    uint numOf_AuctionDays;
    uint numOf_BreakDays; 
    uint indexCurDay;  

    uint amountSellPerDay;
    uint decimalVar;

    mapping (uint => uint) public timeStartDay;
    mapping (uint => uint) public timeEndsDay;
    mapping (uint => uint) public dailyTotals;

    mapping (uint => mapping (address => uint)) public userContribution;
    mapping (uint => mapping (address => bool)) public claimed;
    
    event Buy (uint day, address user, uint amount);
    event Claim (uint day, address user, uint amount); 

    function NewsCrowdsale() public {  
        numOf_SalesDays = 160; 
        numOf_BreakDays = 5;
        numOf_AuctionDays = 10;

        indexCurDay = 1; 
        decimalVar = 10 ether; 
          
        timeDeploy = now; 
        timeStartDay[1] = timeDeploy + numOf_BreakDays * 1 minutes; 
        timeEndsDay[1] = timeDeploy + (numOf_BreakDays + 1) * 1 minutes; 
    } 

    modifier whenNotPause(uint today) {
        while (today >= timeStartDay[indexCurDay + 1] && indexCurDay < numOf_SalesDays) {
            indexCurDay++;
        }
        
        require(today >= timeStartDay[indexCurDay] && today <= timeEndsDay[indexCurDay]);
        _;
    }  

    function setTokenAddress(address tokenAddress) public {
        require(token == address(0));
        token = tokenAddress;

        amountSellPerDay = IToken(token).balanceOf(this) / numOf_SalesDays * decimalVar;
    }

    function initStartAuctionDays() public {
        require(timeStartAuction == 0);

        uint i = 1;
        while (i < numOf_SalesDays) {  
            
            uint j = 1;
            for (;j < numOf_AuctionDays; j++) {
                timeStartDay[i + j] = timeStartDay[i + j - 1] + 3 minutes; 
            }
            i += j;
            
            timeStartDay[i] = timeStartDay[i - 1] + (numOf_BreakDays + 1) * 3 minutes;  
        } 

        timeStartAuction = timeStartDay[1];  
    }

    function initEndsAuctionDays() public {
        require(timeFinalizeAuction == 0);

        uint i = 1;
        while (i < numOf_SalesDays) {  
            
            uint j = 1;
            for (;j < numOf_AuctionDays; j++) {
                timeEndsDay[i + j] = timeEndsDay[i + j - 1] + 3 minutes; 
            }
            i += j;
            
            timeEndsDay[i] = timeEndsDay[i - 1] + (numOf_BreakDays + 1) * 3 minutes;  
        } 

        timeFinalizeAuction = timeEndsDay[numOf_SalesDays];  
    }

     function () payable external {
       buy();
    }  
    
    function buy() payable public whenNotPause(now) {   
 
        userContribution[indexCurDay][msg.sender] += msg.value;
        dailyTotals[indexCurDay] += msg.value; 
        
        ownerWallet.transfer(msg.value);
        
        Buy(indexCurDay, msg.sender, msg.value);
    }  

    function claim(uint day) public { 
        if (claimed[day][msg.sender] || dailyTotals[day] == 0) {
            return;
        }
        
        require(now > timeEndsDay[day]);
        
        uint price        = amountSellPerDay / dailyTotals[day];
        uint userPersent  = price * userContribution[day][msg.sender];
        uint reward       = userPersent / decimalVar; 

        claimed[day][msg.sender] = true;
        IToken(token).transfer(msg.sender, reward);

        Claim(day, msg.sender, reward);
    } 

    function claimAll() external { 
        for (uint i = 1; i < indexCurDay + 1; i++) {
            claim(i);
        } 
    }  

    function getQuantitySoldEveryDay() public view returns(uint) {
        return amountSellPerDay / decimalVar;
    } 
    
    function getCurrentDay() public view returns(uint) {
        uint dayCounter = indexCurDay;
        
        while (now >= timeStartDay[dayCounter + 1]) {
            dayCounter++;
        } 
        return now >= timeStartAuction && now <= timeFinalizeAuction
                ? dayCounter 
                : 0;
    }

    function getNumberOfSalesDays() public view returns(uint) {
        return numOf_SalesDays;
    }

    function getTimeAuctionStart() public view returns(uint) {
        return timeStartAuction;
    }

    function getTimeAuctionFinalize() public view returns(uint) {
        return timeFinalizeAuction;
    }

    function isAuctionActive() public view returns(bool) {
        uint dayCounter = indexCurDay; 
        while (now >= timeStartDay[dayCounter + 1]) {
            dayCounter++;
        } 

        return now >= timeStartDay[dayCounter] && now <= timeEndsDay[dayCounter];
    }
	
	function getTimeNow() public view returns(uint) {
		return now;
	} 
}